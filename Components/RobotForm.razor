@using Application.Commands
@using Application.Queries

@using FluentValidation

@inject IMediator mediator
@inject ISnackbar snackbar

<MudText Typo="Typo.h3" GutterBottom="true">Robot Form</MudText>

<MudPaper Class="pa-4">
    <MudForm @ref="form" Model="robotModel" Validation="robotValidator.ValidateValue">

        <MudTextField @bind-Value="robotModel.Code" For="() => robotModel.Code" Immediate="true" Label="Code" />

        <MudTextField @bind-Value="robotModel.Power" For="() => robotModel.Power" Immediate="true" Label="Power" />

        @if (cyberBrains is not null)
        {
            <MudSelect
                @bind-Value="robotModel.CyberBrain" 
                For="() => robotModel.CyberBrain"
                Label="Cyber Brain" 
                AnchorOrigin="Origin.BottomCenter">

                @foreach (var cyberBrain in cyberBrains)
                {
                    <MudSelectItem Value="cyberBrain" />
                }

            </MudSelect>
        }
    </MudForm>
    <MudCardActions>
        <MudButton 
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            Class="ml-auto" 
            OnClick="async () => await Submit()">
            Add Robot ðŸ¤–
        </MudButton>
    </MudCardActions>
</MudPaper>

<RobotList Robots="robots" DeleteRobot="DeleteRobot" />

@code {

    Robot robotModel = new();
    MudForm? form;
    RobotValidator robotValidator = new RobotValidator();

    List<CyberBrain>? cyberBrains;
    List<Robot>? robots;

    protected override async Task OnInitializedAsync()
    {
        cyberBrains = await mediator.Send(new GetAllCyberBrains.Query());
        robots = await mediator.Send(new GetAllRobots.Query());
    }

    async void DeleteRobot(int robotId)
    {
        await mediator.Send(new DeleteRobot.Command(robotId));
        snackbar.Add("Deleted!");
        robots = await mediator.Send(new GetAllRobots.Query());
        StateHasChanged();
    }

    private async Task Submit()
    {
        await form!.Validate();

        if (form.IsValid)
        {
            await mediator.Send(new AddRobot.Command(robotModel.Code, robotModel.Power, robotModel.CyberBrain!));
            snackbar.Add("Submited!");
            robots = await mediator.Send(new GetAllRobots.Query());
            robotModel = new();
        }
    }
}
